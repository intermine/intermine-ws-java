apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "signing"
apply plugin: "checkstyle"

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java', 'build/gen']
    }
    resources {
      srcDirs = ['src/main/resources']
    }
  }
  test {
    java {
      srcDirs = ['src/test/java']
    }
    resources {
      srcDirs = ['src/test/resources']
    }
  }
}


group 'org.intermine'
version '3.1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8
  
repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile group: "org.intermine", name: "intermine-pathquery", version: System.getProperty("imVersion")
  compile group: "org.intermine", name: "intermine-webapp", version: System.getProperty("imVersion")
  compile group: "org.intermine", name: "intermine-model", version: System.getProperty("imVersion")
  compile group: 'commons-codec', name: 'commons-codec', version: '1.9'
  compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
  compile group: 'org.json', name: 'json', version: '20131018'
  compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
  testCompile group: 'junit', name: 'junit', version: '4.8.2'
}

test {
  ignoreFailures = true

  // we have a system property that we need to get to the tests
  systemProperties System.properties

  testLogging {
    events "skipped", "failed"
    exceptionFormat "full"
    showExceptions true
    showStackTraces true
    showCauses true
  }
}

// see http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}

checkstyle {
  toolVersion '7.8.1'
  configFile file("config/checkstyle/checkstyle.xml")
  sourceSets = [sourceSets.main]
  showViolations = true
  ignoreFailures = false
  maxWarnings = 0
  //reportsDir = file("$project.rootDir/reports/checkstyle/$project.name")
  configProperties = [
          'checkstyle.header.file': "config/checkstyle/copyright_header.txt",
          'suppressionFile': "config/checkstyle/suppressions.xml"
  ]
}

def excludePattern = 'build/generated-src/antlr/main/'
def excludePatternAntStyle = '**/' + excludePattern + '*'

checkstyleMain {
  exclude excludePatternAntStyle
  source = fileTree('src/main') {
    includes = ['**/*.java']
    excludes = ['build/**']
  }
}

checkstyleTest {
  enabled = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

signing {
  required { gradle.taskGraph.hasTask("publish") }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name project.name
        packaging 'jar'
        description 'InterMine Java Client'
        url 'https://github.com/intermine/intermine'

        scm {
          connection 'scm:git:git://github.com/intermine/intermine-ws-java.git'
          developerConnection 'scm:git:ssh://github.com:intermine/intermine-ws-java.git'
          url 'https://github.com/intermine/intermine-ws-java.git'
        }

        licenses {
          license {
            name 'LGPL-2.1'
            url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
          }
        }

        developers {
          developer {
            name 'InterMine core team and contributors'
          }
        }
      }
    }
  }
}



